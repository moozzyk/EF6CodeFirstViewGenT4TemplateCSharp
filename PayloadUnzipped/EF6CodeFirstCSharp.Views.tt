<#
/*
Copyright (c) Pawel Kadluczka. All rights reserved.

AS IS, NO WARRANTY, USE ON YOUR OWN RISK

T4 template for creating pre-generated views for Entity Framework 6 Code First applications

Usage: 
1. Build your project
2. Add this template to your project
3. Rename this template so that its name contains the name of your DbContext derived class (e.g. MyContext.Views.tt)
4. Right-click the template file in the Solution Explorer and select "Run Custom Tool"
5. If you have more than one DbContext derived class in your project you need to add a separate template for each
   DbContext derived class you want to create pre-generated views for. 
*/
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(TargetPath)"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="System.Configuration"#>
<# 
	var configFilePath = GetConfigFilePath();
	if (configFilePath != null)
	{
		AppDomain.CurrentDomain.SetData("APP_CONFIG_FILE", configFilePath);
		ResetConfigMechanism();
	}
	
	var contextType = GetContextType(GetContextTypeName());

	var efAssembly = GetEfAssembly(contextType);

	dynamic mappingItemCollection = 
		GetMappingItemCollection(efAssembly, GetEdmx(efAssembly, contextType));

	dynamic errors = 
		Activator.CreateInstance(
			typeof(List<>).MakeGenericType(efAssembly.GetType("System.Data.Entity.Core.Metadata.Edm.EdmSchemaError")));

	dynamic views = mappingItemCollection.GenerateViews(errors);

	if (errors != null && errors.Count > 0)
	{
		var errorString = new StringBuilder();

		foreach (dynamic e in errors)
		{
			errorString.AppendLine(string.Format("{0} {1}: {2}", e.Severity, e.ErrorCode, e.Message));
		}

		Error(errorString.ToString());
	}

	// if no errors CodeFirst always generates just one EntityContainer
	SaveViews(mappingItemCollection.ComputeMappingHashValue(), views);

	var viewClassName = "ViewsForBaseEntitySets" + Guid.NewGuid().ToString("N");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
[assembly: System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute(typeof(<#= contextType.FullName #>), typeof(Edm_EntityMappingGeneratedViews.<#= viewClassName #>))]
namespace Edm_EntityMappingGeneratedViews
{
	using System.Collections.Generic;
	using System.Data.Entity.Core.Metadata.Edm;
	using System.Data.Entity.Infrastructure.MappingViews;
	using System.Reflection;
	using System.Xml;
	using System.Xml.Linq;

	/// <Summary>
	/// The type contains views for EntitySets and AssociationSets that were generated at design time.
	/// </Summary>
	public sealed class <#= viewClassName #> : DbMappingViewCache
	{
		private static Dictionary<string, DbMappingView> extentViews = null;
		private readonly static object lockObject = new object();

		public override string MappingHashValue { get { return "<#= mappingItemCollection.ComputeMappingHashValue() #>"; } }

		/// <Summary>
		/// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
		/// </Summary>
		public <#= viewClassName #>()
		{
		}

		/// <Summary>
		/// The method returns the view for the index given.
		/// </Summary>
		public override DbMappingView GetView(EntitySetBase extent)
		{
			// do not lock if views are loaded
			if (extentViews == null)
			{
				lock(lockObject)
				{
					if (extentViews == null)
					{
						LoadViews();
					}
				}
			}

			DbMappingView view;
			extentViews.TryGetValue(GetExtentFullName(extent), out view);
			return view;
		}

		private static void LoadViews()
		{
			extentViews = new Dictionary<string, DbMappingView>();

			using (var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream("<#=GetManifestResourceName()#>"))
			using (var reader = XmlReader.Create(stream))
			{
				while (reader.ReadToFollowing("view"))
				{
					extentViews.Add(reader["extent"], new DbMappingView(reader.ReadElementContentAsString()));
				}
			}
		}

		private static string GetExtentFullName(EntitySetBase entitySet)
		{
			return string.Format("{0}.{1}", entitySet.EntityContainer.Name, entitySet.Name);
		}
	}
}
<#+

	private string GetContextTypeName()
	{
		var templateFileName = Path.GetFileNameWithoutExtension(Host.TemplateFile);

		var dotPosition = templateFileName.IndexOf('.');
		if(dotPosition <= 0)
		{
			throw new InvalidOperationException(
				string.Format("The template name '{0}' has an unexpected format.", Host.TemplateFile));
		}

		return templateFileName.Substring(0, dotPosition);
	}

	private static Type GetContextType(string contextTypeName)
	{
		foreach(var assembly in AppDomain.CurrentDomain.GetAssemblies().Where(a => !a.IsDynamic))
		{
			var contextType = assembly
								.GetTypes()
								.AsEnumerable()
								.FirstOrDefault(
									t => 
										t.Name == contextTypeName && 
										GetDbContextType(t) != null);

			if(contextType != null)
			{
				return contextType;
			}
		}

		throw new InvalidOperationException(
			"Could not find the context type. Make sure the template name is using convention '{ContextTypeName}.Views.tt'");
	}

	private static Type GetDbContextType(Type contextType)
	{
		while((contextType = contextType.BaseType) != null)
		{
			if(contextType.FullName == "System.Data.Entity.DbContext" && contextType.Assembly.FullName.StartsWith("EntityFramework"))
			{
				return contextType;
			}
		}

		return null;
	}

	private static Assembly GetEfAssembly(Type contextType)
	{
		var dbContextType = GetDbContextType(contextType);

		if(dbContextType != null)
		{
			return dbContextType.Assembly;
		}
		
		throw new InvalidOperationException("Cannot find DbContextType.");
	}

	private XDocument GetEdmx(Assembly efAssembly, Type contextType)
	{
		using(var ms = new MemoryStream())
		{
			using(var writer = XmlWriter.Create(ms))
			{
				using(var context = (IDisposable)Activator.CreateInstance(contextType))
				{								
					var writeEdmxMethod =  
						efAssembly
							.GetType("System.Data.Entity.Infrastructure.EdmxWriter")
							.GetMethod("WriteEdmx", new[] { efAssembly.GetType("System.Data.Entity.DbContext"), typeof(XmlWriter)});
							
					writeEdmxMethod.Invoke(null, new [] { context, writer});
				}
			}

			ms.Position = 0;

			return XDocument.Load(ms);
		}
	}

	private void SplitEdmx(XDocument edmx, out XmlReader csdlReader, out XmlReader ssdlReader, out XmlReader mslReader)
	{
		// xml namespace agnostic to make it work with any version of Entity Framework
        var edmxNs = edmx.Root.Name.Namespace;

        var storageModels = edmx.Descendants(edmxNs + "StorageModels").Single();
        var conceptualModels = edmx.Descendants(edmxNs + "ConceptualModels").Single();
        var mappings = edmx.Descendants(edmxNs + "Mappings").Single();

        ssdlReader = storageModels.Elements().Single(e => e.Name.LocalName == "Schema").CreateReader();
        csdlReader = conceptualModels.Elements().Single(e => e.Name.LocalName == "Schema").CreateReader();
        mslReader = mappings.Elements().Single(e => e.Name.LocalName == "Mapping").CreateReader();
	}

	private dynamic /*StorageMappingItemCollection*/ GetMappingItemCollection(Assembly efAssembly, XDocument edmx)
	{
		// extract csdl, ssdl and msl artifacts from the Edmx
		XmlReader csdlReader, ssdlReader, mslReader;
		SplitEdmx(edmx, out csdlReader, out ssdlReader, out mslReader);

		// Initialize item collections
		var edmItemCollection = 
			Activator.CreateInstance(
				efAssembly.GetType("System.Data.Entity.Core.Metadata.Edm.EdmItemCollection"), 
				new[] { csdlReader }.AsEnumerable<XmlReader>());

		var storeItemCollection = 
			Activator.CreateInstance(
				efAssembly.GetType("System.Data.Entity.Core.Metadata.Edm.StoreItemCollection"), 
				new[] { ssdlReader }.AsEnumerable<XmlReader>());

		var mappingItemCollectionCtor = 
			efAssembly.GetType("System.Data.Entity.Core.Mapping.StorageMappingItemCollection")
			.GetConstructor(new[] { edmItemCollection.GetType(), storeItemCollection.GetType(), typeof(IEnumerable<XmlReader>) });

		return mappingItemCollectionCtor
			.Invoke(new object[] { edmItemCollection, storeItemCollection, new[] {mslReader}.AsEnumerable<XmlReader>()});
	}
	
	private void SaveViews(string mappingHashValue, /*Dictionary<EntitySetBase, DbMappingView>*/ dynamic views)
	{
		var embeddedViewsFileName = Path.ChangeExtension(Host.TemplateFile, "xml");
		using(var writer = XmlWriter.Create(embeddedViewsFileName, new XmlWriterSettings { Indent = true }))
		{
			writer.WriteStartElement("views");
			writer.WriteAttributeString("MappingHash", mappingHashValue);
			foreach(dynamic kvp in views)
			{
				writer.WriteStartElement("view");
				writer.WriteAttributeString("extent", GetExtentFullName(kvp.Key));
				writer.WriteCData(kvp.Value.EntitySql);
				writer.WriteEndElement();
			}

			writer.WriteEndElement();
		}

		AddViewsToProject(embeddedViewsFileName);
	}

	private static string GetExtentFullName(/*EntitySetBase*/ dynamic entitySet)
	{
		return string.Format("{0}.{1}", entitySet.EntityContainer.Name, entitySet.Name);
	}

	private string GetConfigFilePath()
	{
		var project = GetTemplateProjectItem().ContainingProject;
		var configFile = 
			project
			.ProjectItems
			.Cast<EnvDTE.ProjectItem>()
			.FirstOrDefault(i => string.Compare("web.config", i.Name, true) == 0 || string.Compare("app.config", i.Name, true) == 0);

		return configFile == null ? null : configFile.FileNames[0];
	}

	private void AddViewsToProject(string filePath)
	{
		var projectItem = GetTemplateProjectItem().ProjectItems.AddFromFile(filePath);
		projectItem.Properties.Item("BuildAction").Value = /*prjBuildActionEmbeddedResource*/ 3;
	}

	private EnvDTE.ProjectItem GetTemplateProjectItem()
	{
		var dte = (EnvDTE.DTE)((IServiceProvider)Host).GetService(typeof(EnvDTE.DTE));
		return dte.Solution.FindProjectItem(Host.TemplateFile);
	}

	private string GetManifestResourceName()
	{
		var project = GetTemplateProjectItem().ContainingProject;
		var projectNamespace = project.Properties.Item("DefaultNamespace").Value.ToString();
		var projectPathname = project.Properties.Item("FullPath").Value.ToString();

		var xmlPathName = Path.ChangeExtension(Host.TemplateFile, "xml");
		xmlPathName = xmlPathName.Replace(projectPathname, string.Empty);
		xmlPathName = xmlPathName.Replace("\\", ".");

		return projectNamespace + "." + xmlPathName;
	}

	// http://stackoverflow.com/a/6151688/1168070
	private static void ResetConfigMechanism()
	{
		typeof(ConfigurationManager)
			.GetField("s_initState", BindingFlags.NonPublic | BindingFlags.Static)
			.SetValue(null, 0);

		typeof(ConfigurationManager)
			.GetField("s_configSystem", BindingFlags.NonPublic | BindingFlags.Static)
			.SetValue(null, null);

		typeof(ConfigurationManager).Assembly.GetTypes()
			.Where(x => x.FullName == "System.Configuration.ClientConfigPaths")
			.First()
			.GetField("s_current", BindingFlags.NonPublic | BindingFlags.Static)
			.SetValue(null, null);
	}
#>